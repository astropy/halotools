[project]
name = "halotools"
dynamic = ["version", "dependencies"]
description = "Package designed to analyze N-body simulations and constrain models of cosmology and galaxy evolution"
readme = "README.rst"
authors = [
    { name = "Andrew Hearin", email = "ahearin@anl.gov" }
]
license = { file = 'LICENSE' }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
]
requires-python = ">=3.11"

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[project.optional-dependencies]
test = [
    "coverage[toml]",
    "pytest>=7.0",
    "pytest-astropy>=0.10",
    "pytest-xdist",
]
docs = [
    "sphinx-astropy",
    "pytest>=7.0",
    "matplotlib",
]


[tool.setuptools]
include-package-data = true
package-dir = {halotools = "halotools"}
package-data = {halotools = ["data/*", "*/data/*", "*/*/data/*", "*/*/*/data/*", "*/*/*/*/data/*", "*/*/*/*/*/data/*", "*/*/*/*/*/*/data/*"]}
license-files = ["licenses/*.rst"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["halotools", "docs"]
astropy_header = true
doctest_plus = "enabled"
text_file_format = "rst"
addopts = [
    "--doctest-rst",
]
markers = ["slow", "installation_test"]

[build-system]
requires = ["setuptools>=42.0.0",
            "setuptools_scm",
            "wheel",
            "oldest-supported-numpy",
            "cython==3.0.2",
            "extension-helpers==1.*"]
build-backend = 'setuptools.build_meta'


[tool.coverage]

    [tool.coverage.run]
        omit = [
            "halotools/_astropy_init*",
            "halotools/__init__*",
            "halotools/**/setup*",
            "halotools/**/tests/*",
            "halotools/extern/*",
            "halotools/version*",
            "halotools/conftest.py",
            "halotools/*setup_package*",
            "*/halotools/_astropy_init*",
            "*/halotools/conftest.py",
            "*/halotools/*setup_package*"
        ]

    [tool.coverage.report]
        exclude_lines = [
            # Have to re-enable the standard pragma
            "pragma: no cover",
            # Don't complain about packages we have installed
            "except ImportError",
            # Don't complain if tests don't hit defensive assertion code:
            "raise AssertionError",
            "raise NotImplementedError",
            # Don't complain about script hooks
            "'def main(.*):'",
            # Ignore branches that don't pertain to this version of Python
            "pragma: py{ignore_python_version}",
            # Don't complain about IPython completion helper
            "def _ipython_key_completions_",
            # typing.TYPE_CHECKING is False at runtime
            "if TYPE_CHECKING:",
            # Ignore typing overloads
            "@overload",
        ]
